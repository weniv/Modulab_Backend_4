"""
# 종합 실습: 도서관 관리 시스템 구현하기

아래 문제를 통해 파이썬 리스트의 다양한 기능을 활용해봅시다. 도서관 책 관리 시스템을 만드는 과정에서 리스트의 여러 메서드를 실습해볼 것입니다.

## 문제

당신은 작은 도서관의 책 관리 시스템을 개발하고 있습니다. 다음 단계에 따라 리스트를 활용한 책 관리 시스템을 구현해보세요.

### 1단계: 초기 도서 목록 생성하기
- `books` 리스트에 다음 5권의 책을 추가하세요: "파이썬 기초", "데이터 과학 입문", "알고리즘의 이해", "머신러닝 실전", "파이썬 기초"
- `books` 리스트를 출력하세요.

### 2단계: 책 목록 관리하기
- 목록에서 "파이썬 기초"가 몇 권 있는지 확인하세요.
- "웹 개발의 시작"이라는 책을 목록 끝에 추가하세요.
- "데이터베이스 설계"라는 책을 3번째 위치에 삽입하세요.
- 새로운 책 리스트 `new_books`를 만들고 ["인공지능 개론", "클라우드 컴퓨팅"]을 포함시킨 후, `books` 리스트에 추가하세요.
- 수정된 `books` 리스트를 출력하세요.

### 3단계: 책 제거 및 관리하기
- 목록에서 첫 번째로 등장하는 "파이썬 기초"를 제거하세요.
- 리스트의 마지막 책을 빼내어 변수 `last_book`에 저장하고, 이 책을 출력하세요.
- 책 목록을 알파벳 순으로 정렬하세요.
- 정렬된 목록을 역순으로 뒤집으세요.
- 수정된 `books` 리스트를 출력하세요.

### 4단계: 도서 목록 분석하기
- 슬라이싱을 사용하여 `books` 리스트의 처음 3권을 `top_books`라는 새 리스트에 저장하세요.
- `books` 리스트에서 2번째부터 5번째까지의 책들을 역순으로 `reversed_selection`이라는 새 리스트에 저장하세요.
- `top_books`와 `reversed_selection`을 출력하세요.
- `books` 리스트를 완전히 비우고 출력하세요.
"""

"-----------------------------해설------------------------------------"


"""
## 해설

### 1단계 해설:
```python
# 초기 도서 목록 생성
books = ["파이썬 기초", "데이터 과학 입문", "알고리즘의 이해", "머신러닝 실전", "파이썬 기초"]
print(books)
```
리스트는 파이썬에서 여러 항목을 담을 수 있는 가변적이고 순서가 있는 자료형입니다. 이는 실제 도서관에서 책 목록을 관리하는 것과 유사합니다. 각 책은 리스트의, 각 요소에 저장되며 순서대로 접근할 수 있습니다. 이처럼 리스트는 한 종류의 데이터를 모아서 관리할 때 사용합니다.

### 2단계 해설:
```python
# "파이썬 기초"가 몇 권 있는지 확인
python_count = books.count("파이썬 기초")
print(f"'파이썬 기초' 책은 {python_count}권 있습니다.")

# 책 목록에 새로운 책 추가
books.append("웹 개발의 시작")
print("책 추가 후:", books)

# 특정 위치에 책 삽입
books.insert(2, "데이터베이스 설계")
print("책 삽입 후:", books)

# 여러 책을 한번에 추가
new_books = ["인공지능 개론", "클라우드 컴퓨팅"]
books.extend(new_books)
print("여러 책 추가 후:", books)
```

여기서 `count()` 메서드는 특정 값이 리스트에 몇 번 포함되어 있는지 카운트합니다. 실제 도서관에서 특정 책이 몇 권 있는지 파악하는 것과 같습니다.

`append()` 메서드는 리스트의 끝에 값을 추가합니다. 마치 도서관 서가의 맨 끝에 새 책을 꽂는 것과 같습니다.

`insert()` 메서드는 주어진 위치에 값을 삽입합니다. 도서관에서 정해진 위치에 새 책을 끼워 넣는 것과 비슷합니다.

`extend()` 메서드는 리스트에 다른 리스트나 순회 가능한(iterable) 항목들을 추가합니다. 여러 권의 책을 한 번에 서가에 추가하는 것과 같습니다. `append()`와 다르게 들어가는 값이 이터러블한 객체이기 때문에 각 요소를 개별적으로 추가합니다.

### 3단계 해설:
```python
# 첫 번째로 등장하는 "파이썬 기초" 제거
books.remove("파이썬 기초")
print("'파이썬 기초' 제거 후:", books)

# 마지막 책을 빼내어 저장
last_book = books.pop()
print("빼낸 마지막 책:", last_book)
print("책 빼낸 후:", books)

# 알파벳 순으로 정렬
books.sort()
print("정렬 후:", books)

# 역순으로 뒤집기
books.reverse()
print("역순 정렬 후:", books)
```

`remove()` 메서드는 리스트에서 첫 번째로 발견되는 주어진 값을 삭제합니다. 도서관에서 특정 책을 찾아 제거하는 작업과 비슷합니다.

`pop()` 메서드는 리스트의 특정 위치에 있는 값을 반환하고 해당 값을 리스트에서 삭제합니다. 인덱스를 지정하지 않으면 마지막에서 값을 뺍니다. 이는 도서관에서 책을 빌려주는 과정과 유사합니다 - 책을 서가에서 가져오고 누가 빌렸는지 기록합니다.

`sort()` 메서드는 리스트 자체를 정렬합니다. 도서관에서 책을 알파벳 순으로 재배열하는 것과 같습니다.

`reverse()` 메서드는 리스트의 항목들의 순서를 뒤집습니다. 책들을 Z에서 A 순으로 재배열하는 것과 비슷합니다.

### 4단계 해설:
```python
# 슬라이싱으로 처음 3권 선택
top_books = books[:3]
print("처음 3권:", top_books)

# 2번째부터 5번째까지 역순으로 선택
reversed_selection = books[1:5][::-1]
print("2~5번째 책 역순:", reversed_selection)

# 리스트 비우기
books.clear()
print("리스트 비운 후:", books)
```

슬라이싱은 [start:stop:step] 형태로 사용하며, step은 기본적으로 1이며 생략할 수 있습니다. 이는 도서관 서가에서 특정 구간의 책들을 선택하는 것과 같습니다.

다양한 형태의 슬라이싱이 사용가능합니다. 슬라이싱을 2번 또는 n번 사용하여 값을 반환하는 것도 가능합니다. 예시에서 `books[1:5][::-1]`는 먼저 2번째부터 5번째 책을 선택한 다음, 그 결과를 역순으로 배열합니다.

`clear()`는 리스트의 모든 항목을 삭제합니다. 도서관의 모든 책을 한 번에 제거하는 것과 같습니다.

"""


# 문제1
books = [
    "파이썬 기초",
    "데이터 과학 입문",
    "알고리즘의 이해",
    "머신러닝 실전",
    "파이썬 기초",
]
print(books)

# 문제 2

python_count = books.count("파이썬 기초")
print(f"파이썬 기초 책은 {python_count}권 있습니다.")

books.append("웹 개발의 시작")
print(f"책 추가 후: {books}")

books.insert(2,"데이터베이스 설계")
print(f"책 삽입 후: {books}")

new_books = ["인공지능 개론","클라우드 컴퓨팅"]
books.extend(new_books)
print(f"여러책 추가 후: {books}")

# 문제 3
books.remove("파이썬 기초")
print(f"파이썬 기초 제거 후: {books}")

last_book = books.pop()
print(f"빼낸 마지막 책: {last_book}")
print(f"책 빼낸 후: {books}")

books.sort()
print(f"정렬 후: {books}")

books.reverse()
print(f"역순 정렬 후: {books}")

# 문제 4
top_books = books[0:3] # books[:3]
print(f"처음 3권: {top_books}")

reversed_selection = books[1:5][::-1]
# reversed_selection = list(reversed(books[1:5]))
print(f"2~5번째 책 역순: {reversed_selection}")

books.clear()
print(f"리스트 비운 후: {books}")